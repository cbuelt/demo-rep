KRR
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
fitControl <- trainControl(method="repeatedcv", number=5,repeats=5)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
fitControl <- trainControl(method="repeatedcv", number=10,repeats=2)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
fitControl <- trainControl(method="repeatedcv", number=10,repeats=10)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
out<-data.frame(sigma=seq(0.5,1,.05),
lambda=seq(0.5,1,.05))
combn(out)
out[,1]
expand.grid(out[,1],out[,2])
expand.grid("sigma"=out[,1],"lambda"=out[,2])
out<-data.frame(sigma=seq(0.5,1,.05),
lambda=seq(0.5,1,.05))
out
sigma=seq(0.5,1,.05)
lambda=seq(0.5,1,.05)
expand.grid("sigma"=sigma,"lambda"=lambda)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma=seq(0.5,1,.05)
lambda=seq(0.5,1,.05)
expand.grid("sigma"=sigma,"lambda"=lambda)
sigma=seq(0.1,1.5,.1)
sigma
sigma=seq(0.1,1.5,.1)
lambda=seq(0,2,.1)
expand.grid("sigma"=sigma,"lambda"=lambda)
length(sigma)
length(lambda)
sigma=seq(0.1,1.2,.1)
lambda=seq(0,2,.2)
expand.grid("sigma"=sigma,"lambda"=lambda)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma=seq(0.01,1.2,.1)
lambda=seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
length(grid)
dim(grid)
sigma=seq(0.01,1.2,.05)
lambda=seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
dim(grid)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
len=5
rng <- extendrange(log(sigmas), f = .75)
out <- data.frame(sigma = exp(runif(len, min = rng[1], max = rng[2])),
C = 2^runif(len, min = -5, max = 8))
test<-rbfdot(sigma=-1)
test(1,1)
test(1,5)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma<-seq(0.01,1,.1)
lambda<-seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
dim(grid)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
summary(KRR)
View(KRR)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
library(caret)
library(mlbench)
library(mvtnorm)
library(kernlab)
library(MASS)
library(MLmetrics)
test<-matrix(0,5,5)
View(test)
solve(test)
ginv(test)
lambda_seq <-seq(from=0, to=5, by=0.5)
length(lambda_deq)
length(lambda_seq)
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("shinydashboard")
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
library(shiny)
library(readxl)
library(ggplot2)
library(dplyr)
library(plotly)
library(rgl)
library(hrbrthemes)
library(viridis)
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
library(tidyr)
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
print("Summary")
print(summary(res))
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/Sigma_correlation.R')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/Sigma_correlation.R')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/Sigma_correlation.R')
#Load packages
library(caret)
library(mlbench)
library(mvtnorm)
library(kernlab)
library(MASS)
library(MLmetrics)
library(Matrix)
library(plyr)
library(listdtr)
library(corrplot)
library(progress)
#Source functions
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("functions.R")
source("krr_functions.R")
source("huber_krr_functions.R")
#Parameters
n<-25
p<-5
gamma<-0.02
tt_split <- 0.75
noise <- 0.02
lambda_out <-3
#Create KRR Model
krr_model<-get_krr_model()
krr_fit <- trainControl(method="cv", number=5)
#Create KRR grid
sigma_krr<-seq(0.1,3.1,0.2)
lambda_krr<-seq(0,4,0.5)
grid_krr<-expand.grid("lambda"=lambda_krr,"sigma"=sigma_krr)
#Measure time
start_time <- Sys.time()
#Create progress bar
pb <- progress_bar$new(
format = "  Progress [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
#Get train-test-data
data<-generate_dataset(n,p,gamma,lambda_out)
training_data<-data[["training_data"]]
testing_data<-data[["testing_data"]]
#Train KRR model
Trained_krr_model <- train(y ~ .,data=training_data,
method=krr_model,
trControl=krr_fit,
metric="RMSE",
maximize=FALSE,
tuneGrid=grid_krr)
#KRR predict
krr_predict <- predict(Trained_krr_model, testing_data)
#Get results
results<-Trained_krr_model[["results"]]
results<-results[order(results$lambda),]
#Correlation
len_lambda<-length(lambda_krr)
len_sigma<-length(sigma_krr)
correlation<-matrix(NA,nrow=len_sigma,ncol=len_lambda)
View(correlation)
cnt1<-1
cnt2<-len_sigma
for(i in 1:len_lambda){
pb$tick()
print(results[cnt1:cnt2,][["RMSE"]])
correlation[,i]<-results[cnt1:cnt2,][["RMSE"]]
cnt1<-cnt1+len_sigma
cnt2<-cnt2+len_sigma
}
corr_data<-data.frame(correlation)
colnames(corr_data)<-lambda_krr
corrplot(cor(corr_data),title = "Correlation for sigma=seq(0.1,3.1,0.2)",
method = "number",type="lower")
#Plot train test
plot(X_train,y_train)
plot(X_test,y_test)
points(X_test,krr_predict,col="red")
MSE(krr_predict,y_test)
#Plot Error in dependece of lambda_outlier
ggplot(data=result_df)+geom_line(aes(x=lambda,y=krr_mean_mse,color="KRR"))
end_time - start_time
for(i in 1:len_lambda){
pb$tick()
print(results[cnt1:cnt2,][["RMSE"]])
correlation[,i]<-results[cnt1:cnt2,][["RMSE"]]
cnt1<-cnt1+len_sigma
cnt2<-cnt2+len_sigma
}
corr_data<-data.frame(correlation)
colnames(corr_data)<-lambda_krr
corrplot(cor(corr_data),title = "Correlation for sigma=seq(0.1,3.1,0.2)",
method = "number",type="lower")
#Correlation
len_lambda<-length(lambda_krr)
len_sigma<-length(sigma_krr)
correlation<-matrix(NA,nrow=len_sigma,ncol=len_lambda)
cnt1<-1
cnt2<-len_sigma
for(i in 1:len_lambda){
pb$tick()
print(results[cnt1:cnt2,][["RMSE"]])
correlation[,i]<-results[cnt1:cnt2,][["RMSE"]]
cnt1<-cnt1+len_sigma
cnt2<-cnt2+len_sigma
}
corr_data<-data.frame(correlation)
colnames(corr_data)<-lambda_krr
corrplot(cor(corr_data),title = "Correlation for sigma=seq(0.1,3.1,0.2)",
method = "number",type="lower")
results
#Source functions
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("packages.R")
source("functions.R")
source("krr_functions.R")
#Get cpu cluster count
n_cores <- detectCores() - 1
#Create parameter grid for the whole simulation
n<-c(150,500)
p<-c(1,2,5)
gamma<-seq(from = 0.05, to = 0.3, by = 0.05)
number_simulations <- 3
lambda_outlier<-seq(from = 2, to = 4.5, by=0.25)
param_grid <- expand.grid("n-samples" = n, "p-dimension" = p, "Outlier percentage" = gamma,
"Outlier shift" = lambda_outlier)
#Sort Grid
param_grid<-param_grid[order(param_grid$`p-dimension`,param_grid$`n-samples`,
param_grid$`Outlier percentage`),]
rownames(param_grid)<-NULL
#Create KRR Model
krr_model<-get_krr_model()
krr_fit <- trainControl(method="repeatedcv", number=5, repeats = 2)
#Create Sigma search grid
sigma_krr<-c(seq(from = 0.05, to = 1, by = 0.05), seq(from = 1.4, to = 10, by = 0.4),
seq(from = 11, to = 30, by = 1))
#special grid
sigma_krr<-c(seq(from = 0.01, to = 1, by = 0.03),seq(from = 1.25, to = 2.5, by = 0.25))
lambda_krr<-c(1)
grid_krr<-expand.grid("sigma"=sigma_krr,"lambda"=lambda_krr)
#Create vector for best sigma values
sigma_best<-numeric(number_simulations)
#Create progress bar
pb <- progress_bar$new(
format = "  Progress [:bar] :percent eta: :eta",
total = number_simulations*20, clear = FALSE, width= 60)
#Create dataframe for results
results<-param_grid
results$Sigma<-NA
#Start loop
for(x in 1:2){
#Get parameters of current run
param_actual<-param_grid[x,]
n <- as.numeric(param_actual["n-samples"])
p <- as.numeric(param_actual["p-dimension"])
gamma <- as.numeric(param_actual["Outlier percentage"])
lambda_out <- as.numeric(param_actual["Outlier shift"])
#Parallelization
cl <- makePSOCKcluster(n_cores)
clusterEvalQ(cl, {
library(kernlab)
library(MASS)
})
registerDoParallel(cl)
#Perform simulation on each parameter tuple several times
for (i in 1:number_simulations){
#Create tick for progress bar
pb$tick()
#Get train-test-data
data<-generate_dataset(n,p,gamma,lambda_out)
training_data<-data[["training_data"]]
testing_data<-data[["testing_data"]]
#Train KRR model
Trained_krr_model <- train(y ~ .,data=training_data,
method=krr_model,
trControl=krr_fit,
metric="MAE",
tuneGrid=grid_krr)
#KRR predict
krr_predict <- predict(Trained_krr_model, testing_data)
#Best Sigma
sigma_best[i]<-Trained_krr_model[["bestTune"]][["sigma"]]
}
#Stop parallel
stopCluster(cl)
registerDoSEQ()
#Get mode of best sigma values or mean if mode does not exist
uniqv <- unique(sigma_best)
mode<-uniqv[which.max(tabulate(match(sigma_best, uniqv)))]
if(length(which(sigma_best==mode))<=1){
sigma<-round(mean(sigma_best),2)
}else{
sigma<-mode
}
results[x,]<-c(as.numeric(param_actual),sigma)
write_xlsx(results,path="Sigma_results.xlsx")
}
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation_sigma_values.R')
param_grid
param_grid <- expand.grid("n-samples" = n, "p-dimension" = p, "Outlier percentage" = gamma,
"Outlier shift" = lambda_outlier)
#Create parameter grid for the whole simulation
n<-c(150,500)
p<-c(1,2,5)
gamma<-seq(from = 0.05, to = 0.3, by = 0.05)
number_simulations <- 3
lambda_outlier<-seq(from = 2, to = 4.5, by=0.25)
param_grid <- expand.grid("n-samples" = n, "p-dimension" = p, "Outlier percentage" = gamma,
"Outlier shift" = lambda_outlier)
#Sort Grid
param_grid<-param_grid[order(param_grid$`p-dimension`,param_grid$`n-samples`,
param_grid$`Outlier percentage`),]
rownames(param_grid)<-NULL
param_grid
len(param_grid)
length(param_grid)
dim(param_grid)[1]
#Source functions
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("packages.R")
source("functions.R")
source("krr_functions.R")
source("huber_krr_functions.R")
source("ls_krr_functions.R")
source("kgard_functions.R")
#Data parameters
n_seq<-c(seq(50,1000,50),seq(1200,2000,200),3000)
p<-1
gamma<-0.15
lambda<-3.5
cnt<-1
#Create progress bar
pb <- progress_bar$new(
format = "[:bar] :current/:total (:percent)",
total = length(n_seq), clear = FALSE, width= 60)
#Create KRR Model
krr_model<-get_krr_model()
#Create KRR Huber model
krr_huber_model<-get_huber_krr_model()
#Create weighted model
weighted_krr_model<-get_ls_krr_model()
#Create kgard model
kgard_model <- get_kgard_model()
#Create training fit
train_fit <- trainControl(method="none")
huber_fit <- trainControl(method="none", summaryFunction = huber_loss_metric)
#################Create grids############
#Get value for sigma
sigma<-c(0.1)
#Vector for lambda
lambda_krr<-c(0.5)
lambda_krr2<-c(0.25)
#Create KGARD grid
eps_kgard<-c(0.05)
grid_kgard<-expand.grid("sigma"=sigma,"lambda"=lambda_krr2,"epsilon"=eps_kgard)
#Create Huber grid
m_huber<-c(2.5)
eps_huber<-c(0.005)
grid_huber<-expand.grid("sigma"=sigma,"lambda"=lambda_krr,"m"=m_huber,"epsilon"=eps_huber)
#Dataframe for results
results<-data.frame(matrix(data=NA,ncol=8,nrow=length(n_seq),
dimnames=list(NULL, c("p","n","outlier_perc","outlier_shift","krr",
"huber_krr","weighted_krr","KGARD"))))
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation_runtime.R')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation_runtime.R')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation.R')
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation.R')
parameters
dim(parameters)[1]
