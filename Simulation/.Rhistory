install.packages("e1071")
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
gbmFit1
data(Sonar)
str(Sonar[, 1:10])
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(Sonar)
#Generate data for testing
X_sample<-repeat(2,runif(100,0,1))
#Generate data for testing
X_sample<-replicate(2,runif(100,0,1))
View(X_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(X_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
plot(X_sample[1,],y_sample)
X_sample[1,]
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
X_sample
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
#Custom KRR
K<-kernelMatrix(X_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
dim(K)
a<-(K+lambda*diag(dim(K)[1]))
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
a
a<-solve(K+lambda*diag(dim(K)[1]))%*%y_sample
a
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
prm <- data.frame(parameter = c("C", "sigma"),
class = rep("numeric", 2),
label = c("Cost", "Sigma"))
parameters<-data.frame(parameter=c(sigma,lambda),
class=rep("numeric",2),
label=c("Regularization","Sigma"))
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
krrGrid()
krrGrid
krrGrid(X_sample,y_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
krrGrid()
install.packages("grnn")
dat <- data.frame(y_sample, X_sample)
s <- smooth(learn(dat), sigma=param$sigma)
dat <- data.frame(y_sample, X_sample)
s <- smooth(learn(dat), sigma=0.5)
library(grnn)
dat <- data.frame(y_sample, X_sample)
s <- smooth(learn(dat), sigma=0.5)
s
View(s)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
list("K"=1,"a"=2)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
#Try
dat<-data.frame(y_sample,X_sample)
dat
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
#Prob
krrProb<-NULL
#Add prob to list
modelkrr$prob <- krrProb
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(modelkrr)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
library(foreach)
newdata<-X_sample
xlst <- split(newdata, 1:nrow(newdata))
xlst
library(foreach)
newdata<-X_sample
xlst <- split(newdata, 1:nrow(newdata))
pred <- foreach(i = xlst, .combine = rbind) %do% {
#grnn() can only compute a prediction for one sample at a time
newdata[i,]+1 #provide x values as matrix
}
xlst
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
pred
library(foreach)
newdata<-X_sample
xlst <- split(newdata, 1:nrow(newdata))
pred <- foreach(i = xlst, .combine = rbind) %do% {
#grnn() can only compute a prediction for one sample at a time
xlst+1 #provide x values as matrix
}
library(foreach)
newdata<-X_sample
xlst <- split(newdata, 1:nrow(newdata))
pred <- foreach(i = xlst, .combine = rbind) %do% {
#grnn() can only compute a prediction for one sample at a time
i+1 #provide x values as matrix
}
pred
X_sample
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
warnings()
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
View(KRR)
#Predict
predict(KRR,y_sample)
#Predict
predict(KRR,X_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
X_sample
dat
#Predict
predict(KRR,data.frame(X_sample))
plot(X_sample,y_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
points(X_sample,pred)
MSE(pred,y_sample)
mse(pred,y_sample)
library(MLmetrics)
mse(pred,y_sample)
MSE(pred,y_sample)
plot(X_sample,y_sample)
points(X_sample,pred,col="red")
MSE(pred,y_sample)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr)
#Predict
pred<-predict(KRR,data.frame(X_sample))
plot(X_sample,y_sample)
points(X_sample,pred,col="red")
MSE(pred,y_sample)
KRR
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
fitControl <- trainControl(method="repeatedcv", number=5,repeats=5)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
fitControl <- trainControl(method="repeatedcv", number=10,repeats=2)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
fitControl <- trainControl(method="repeatedcv", number=10,repeats=10)
KRR <- train(y_sample ~ .,data=dat,
method=modelkrr,
trControl=fitControl)
KRR
out<-data.frame(sigma=seq(0.5,1,.05),
lambda=seq(0.5,1,.05))
combn(out)
out[,1]
expand.grid(out[,1],out[,2])
expand.grid("sigma"=out[,1],"lambda"=out[,2])
out<-data.frame(sigma=seq(0.5,1,.05),
lambda=seq(0.5,1,.05))
out
sigma=seq(0.5,1,.05)
lambda=seq(0.5,1,.05)
expand.grid("sigma"=sigma,"lambda"=lambda)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma=seq(0.5,1,.05)
lambda=seq(0.5,1,.05)
expand.grid("sigma"=sigma,"lambda"=lambda)
sigma=seq(0.1,1.5,.1)
sigma
sigma=seq(0.1,1.5,.1)
lambda=seq(0,2,.1)
expand.grid("sigma"=sigma,"lambda"=lambda)
length(sigma)
length(lambda)
sigma=seq(0.1,1.2,.1)
lambda=seq(0,2,.2)
expand.grid("sigma"=sigma,"lambda"=lambda)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma=seq(0.01,1.2,.1)
lambda=seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
length(grid)
dim(grid)
sigma=seq(0.01,1.2,.05)
lambda=seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
dim(grid)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
len=5
rng <- extendrange(log(sigmas), f = .75)
out <- data.frame(sigma = exp(runif(len, min = rng[1], max = rng[2])),
C = 2^runif(len, min = -5, max = 8))
test<-rbfdot(sigma=-1)
test(1,1)
test(1,5)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
sigma<-seq(0.01,1,.1)
lambda<-seq(0,2,.2)
grid<-expand.grid("sigma"=sigma,"lambda"=lambda)
dim(grid)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
summary(KRR)
View(KRR)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Test/caret_test.R', echo=TRUE)
KRR
library(caret)
library(mlbench)
library(mvtnorm)
library(kernlab)
library(MASS)
library(MLmetrics)
test<-matrix(0,5,5)
View(test)
solve(test)
ginv(test)
lambda_seq <-seq(from=0, to=5, by=0.5)
length(lambda_deq)
length(lambda_seq)
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("shinydashboard")
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp()
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
shiny::runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
library(shiny)
library(readxl)
library(ggplot2)
library(dplyr)
library(plotly)
library(rgl)
library(hrbrthemes)
library(viridis)
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
library(tidyr)
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
runApp('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Dashboard/Demonstrator')
print("Summary")
print(summary(res))
source('C:/Users/Chris/Desktop/Bachelorarbeit/Code/Simulation/simulation_runtime.R')
summary(res2)
summary(res)
#Load packages
library(caret)
#library(mlbench)
#library(mvtnorm)
library(kernlab)
library(MASS)
library(MLmetrics)
library(Matrix)
library(plyr)
library(listdtr)
library(progress)
library(microbenchmark)
library(writexl)
#Source functions
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("functions.R")
source("krr_functions.R")
source("huber_krr_functions.R")
source("ls_krr_functions.R")
source("kgard_functions.R")
#Data parameters
n_seq<-c(5000)
p<-1
gamma<-0.15
lambda<-3.5
cnt<-1
#Create progress bar
pb <- progress_bar$new(
format = "[:bar] :current/:total (:percent)",
total = length(n_seq), clear = FALSE, width= 60)
#Create KRR Model
krr_model<-get_krr_model()
#Create KRR Huber model
krr_huber_model<-get_huber_krr_model()
#Create weighted model
weighted_krr_model<-get_ls_krr_model()
#Create kgard model
kgard_model <- get_kgard_model()
#Create training fit
train_fit <- trainControl(method="none")
huber_fit <- trainControl(method="none", summaryFunction = huber_loss_metric)
#################Create grids############
#Get value for sigma
sigma<-c(0.1)
#Vector for lambda
lambda_krr<-c(0.5)
lambda_krr2<-c(0.25)
#Create KRR grid
grid_krr<-expand.grid("sigma"=sigma,"lambda"=lambda_krr)
grid_weighted<-expand.grid("sigma"=sigma,"lambda"=lambda_krr2)
#Create kgard grid
eps_kgard<-c(0.05)
grid_kgard<-expand.grid("sigma"=sigma,"lambda"=lambda_krr2,"epsilon"=eps_kgard)
#Create Huber grid
m_huber<-c(2.5)
eps_huber<-c(0.005)
grid_huber<-expand.grid("sigma"=sigma,"lambda"=lambda_krr,"m"=m_huber,"epsilon"=eps_huber)
#Dataframe for results
results<-data.frame(matrix(data=NA,ncol=8,nrow=length(n_seq),
dimnames=list(NULL, c("p","n","outlier_perc","outlier_shift","krr",
"huber_krr","weighted_krr","KGARD"))))
n
#Determine number of repeats
if(n<=1000){
n_rep<-10
n_rep_kgard<-5
}else{
n_rep<-3
n_rep_kgard<-1
}
#Use microbenchmark to measure performance
#First run for KRR, RKR, Huber
res=microbenchmark(
#Regular krr
train(y ~ .,data=training_data,
method=krr_model,
trControl=train_fit,
metric="MAE",
maximize=FALSE,
tuneGrid=grid_krr),
#Huber krr
train(y ~ .,data=training_data,
method=krr_huber_model,
trControl=huber_fit,
metric="MAE",
maximize=FALSE,
tuneGrid=grid_huber),
#Weighted krr
train(y ~ .,data=training_data,
method=weighted_krr_model,
trControl=train_fit,
metric="MAE",
maximize=FALSE,
tuneGrid=grid_weighted),
times=n_rep,
unit="s",
setup = training_data<-generate_dataset(n = n, p = p,
outlier_perc =  gamma, lambda = lambda,
train_test_split = 1)[["training_data"]]
)
summary(res)
