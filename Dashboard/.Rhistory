}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR","Huber")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR","RKR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
}
data_fit
formula
model_fit<-lm(formula, data=data_fit)
predict(model_fit)
#Rename
data_fit <- rename(data_fit, V1=paste(model,"-pred"))
#Rename
data_fit <- rename(data_fit, paste(model,"-pred")=V1)
#Rename
data_fit <- rename(data_fit, "test"=V1)
#Rename
data_fit <- rename(data_fit, test=V1)
#Rename
data_fit <- rename(data_fit, V1=test)
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR","RKR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, paste(model,"-pred")=V1)
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, test=V1)
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, paste(model,"-pred")=V1)
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
#data_fit <- rename(data_fit, paste(model,"-pred")=V1)
}
data_fit
rename(data_fit, paste(model,"-pred")=V1)
rename(data_fit, (paste(model,"-pred"))=V1)
rename(data_fit, model=V1)
rename(data_fit, !!paste(model,"-pred")=V1)
rename(data_fit, !!paste(model,"-pred"):=V1)
data_fit
rename(data_fit, paste(model,"-pred"):=V1)
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, !!paste(model,"-pred"):=V1)
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, !!paste0(model,"-pred"):=V1)
}
data_fit
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Add new data
data_fit[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_fit$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_fit <- rename(data_fit, !!paste0(model,"-pred"):=V1)
}
data_fit
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KRR, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_fit, y =~ KRR-pred,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KRR, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_fit, y =~ `KRR-pred`,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~RKR, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_fit, y =~ `RKR-pred`,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KGARD, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_fit, y =~ `KGARD-pred`,type="scatter", mode ="lines")
fig
data_complexity<-tibble(seq(0,5000,100))
data_complexity
data_complexity<-tibble("test"=seq(0,5000,100))
data_complexity
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_complexity<-tibble("n"=seq(0,3000,100))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_complexity[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_complexity$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_complexity <- rename(data_complexity, !!paste0(model,"-pred"):=V1)
}
data_complexity<-tibble("n"=seq(0,3000,100))
data_complexity
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_complexity[ , ncol(data_fit) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_complexity$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Predict new data
data_complexity[ , ncol(data_complexity) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_complexity$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_complexity<-tibble("n"=seq(0,3000,100))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_complexity[ , ncol(data_complexity) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_complexity$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_complexity <- rename(data_complexity, !!paste0(model,"-pred"):=V1)
}
data_complexity
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=seq(0,3000,100))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model,"-pred"):=V1)
}
data_pred
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=seq(0,3000,100))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KGARD, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_pred, y =~ `KGARD-pred`,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KGARD, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_pred, y =~ `KGARD`,type="scatter", mode ="lines")
fig
data_complexity
library(hrbrthemes)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data<-read_excel("../data/simulation_results.xlsx")
data_complexity<-read_excel("../data/complexity_results.xlsx")
#Transform complexity
data_c <- data_complexity %>%
select(`KRR`, `Huber`,`RKR`,`KGARD`,`n`) %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, color = ~method)
fig %>% layout(yaxis = list(title="Time [s]"),
xaxis = list(title="n"),
legend = list(x=0.05,y=1,title=list(text='<b> Methods </b>')),
hovermode="compare")
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=seq(0,3000,100))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
fig <- plot_ly(data = data_complexity, x = ~n, y = ~KGARD, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_pred, y =~ `KGARD`,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~Huber, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_pred, y =~ `Huber`,type="scatter", mode ="lines")
fig
fig <- plot_ly(data = data_complexity, x = ~n, y = ~RKR, type="scatter", mode ="markers")
fig <- fig %>% add_trace(data = data_pred, y =~ `RKR`,type="scatter", mode ="lines")
fig
data_pred
data_c
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
data_pred
fig <- plot_ly(data = data_c, x = ~n, y = ~method, type="scatter", mode ="markers")
fig
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=seq(0,3000,100),seq(4000,10000,1000))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
data_pred
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=seq(50,3000,100),seq(4000,10000,1000))
models <- c("KRR","RKR","Huber","KGARD")
data_pred<-tibble("n"=seq(50,3000,100),seq(4000,10000,1000))
data_pred
data_pred<-tibble("n"=seq(50,3000,100),seq(4000,10000,1000))
tibble("n"=seq(50,3000,100),seq(4000,10000,1000))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,10000,1000)))
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,10000,1000)))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,10000,1000),seq(20000,100000,100000)))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,10000,1000),seq(20000,100000,10000)))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,25000,1000)))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
#Predict fits
data_fit<-select(data_complexity,c(n,KRR,Huber,RKR,KGARD))
data_pred<-tibble("n"=c(seq(50,3000,100),seq(4000,30000,1000)))
models <- c("KRR","RKR","Huber","KGARD")
for (model in models){
#Train models
d<-ifelse (model=="Huber", 2, 3)
formula <- paste(model,"~","poly(n,d,raw=TRUE)")
model_fit<-lm(formula, data=data_fit)
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
#Rename
data_pred <- rename(data_pred, !!paste0(model):=V1)
}
data_pred
data_pred <- data_pred %>%
pivot_longer(., cols = c(`KRR`, `Huber`,`RKR`,`KGARD`),
names_to = "method", values_to = "time_pred")
fig <- plot_ly(data = data_c, x = ~n, y = ~time, type="scatter", mode ="markers", color=~method)
fig <- fig %>% add_trace(data = data_pred, y =~ time_pred,type="scatter", mode ="lines", color=~method)
fig
data_pred
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
#Predict new data
data_pred[ , ncol(data_pred) + 1] <- model_fit$coefficients[1] +
tcrossprod(poly(data_pred$n,d,raw=TRUE),t(model_fit$coefficients[-1]))
runApp('Demonstrator')
runApp('Demonstrator')
poly(data_pred$n,d,raw=TRUE)%*%model_fit$coefficients[-1]
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
poly(data_fit$n,d,raw=TRUE)
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
runApp('Demonstrator')
#test
test=TRUE
seq <- ifelse(test==FALSE, c(seq(100,3000,100)),
c(seq(100,3000,100),seq(4000,30000,1000)))
data_pred<-tibble("n"=seq)
data_pred
seq
#test
test=TRUE
seq <- ifelse(test==FALSE, seq(100,3000,100),
c(seq(100,3000,100),seq(4000,30000,1000)))
data_pred<-tibble("n"=seq)
data_pred
seq
seq(100,3000,100)
#test
test=TRUE
seq <- ifelse(test, seq(100,3000,100),
c(seq(100,3000,100),seq(4000,30000,1000)))
data_pred<-tibble("n"=seq)
data_pred
seq
seq <- ifelse(test==TRUE, seq(100,3000,100),
c(seq(100,3000,100),seq(4000,30000,1000)))
data_pred<-tibble("n"=seq)
data_pred
seq
#test
test=TRUE
seq <- ifelse(test==TRUE, seq(100,3000,100),"test")
data_pred<-tibble("n"=seq)
data_pred
seq
seq
seq<-seq(100,3000,100)
data_pred<-tibble("n"=seq)
data_pred
runApp('Demonstrator')
